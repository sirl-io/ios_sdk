// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SIRLCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import CoreBluetooth
import CoreData
import CoreLocation
import CoreMotion
import Foundation
import SSZipArchive
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import os.log
import os
import pipsAPI
@available(iOS 10.0, *)
extension Swift.CodingUserInfoKey {
  public static let managedObjectContext: Swift.CodingUserInfoKey?
}
@available(iOS 10.0, *)
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
@_inheritsConvenienceInitializers @objc open class SirlLogger : ObjectiveC.NSObject {
  public enum externalTag : Swift.String {
    case EXTERNAL
    case TRANSACTION_LOG
    case PROMOTION
    case CUSTOM
    case META
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum externalStr : Swift.String {
    case START
    case END
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum promoEvent : Swift.String {
    case TRIGGERED
    case NOTFIFY
    case PRESENTED
    case IGNORED
    case ROUTED
    case LIMITED
    case ERROR
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public static func recordProductCollected(upc: Swift.String)
  @objc public static func recordExternalTripId(_ id: Swift.String)
  @objc public static func recordExternalUserId(_ id: Swift.String)
  @objc public static func recordTransactionLog(_ data: Swift.String)
  @objc public static func recordTransactionLog(upc: Swift.String, name: Swift.String, qty: Swift.Int, totalPrice: Swift.Double)
  @objc public static func recordMetaInformation(_ data: Swift.String)
  @objc public static func recordCustomEntry(tag: Swift.String, data: Swift.String)
  public static func recordPromotionEevent(event: SIRLCore.SirlLogger.promoEvent, id: Swift.String, details: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NodeBlackList) public class NodeBlackList : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(AisleRegions) public class AisleRegions : CoreData.NSManagedObject {
  @objc override dynamic public func willSave()
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SIRLCore.AisleRegions {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SIRLCore.AisleRegions>
  @objc @NSManaged dynamic public var mlId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var jsonStr: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cacheDate: Foundation.NSDate? {
    @objc get
    @objc set
  }
}
public struct Location : Swift.Decodable {
  public var custId: Swift.UInt32!
  public var appId: Swift.UInt32!
  public var locId: Swift.UInt32!
  public var bldId: Swift.UInt32!
  public var storeId: Swift.UInt32!
  public var companyId: Swift.UInt32!
  public var casingId: Swift.UInt32!
  public var configId: Swift.UInt32!
  public var id: Swift.UInt32!
  public var description: Swift.String!
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(NodeConfig) public class NodeConfig : CoreData.NSManagedObject {
  public func convertObject() -> SIRLCore.NodeConfigs
  @objc override dynamic public func willSave()
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SIRLCore.NodeConfig {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SIRLCore.NodeConfig>
  @objc @NSManaged dynamic public var configuredID: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var roomId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nodeId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var macAddress: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var x: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var y: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var z: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var xMinimum: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var yMinimum: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var zMinimum: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var xMaximum: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var yMaximum: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var zMaximum: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var xa: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ya: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var za: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rotationOrder: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pathLoss: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var measured: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var generation: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var relaventTable: SIRLCore.NodeConfigTable? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cacheDate: Foundation.NSDate? {
    @objc get
    @objc set
  }
}
public class NodeConfigs : Swift.Decodable {
  public init(configuredId: Swift.UInt32?, macAddress: Swift.String, roomId: Swift.UInt32, nodeId: Swift.UInt32, x: Swift.Double, xMinimum: Swift.Double, xMaximum: Swift.Double, y: Swift.Double, yMinimum: Swift.Double, yMaximum: Swift.Double, z: Swift.Double, zMinimum: Swift.Double, zMaximum: Swift.Double, pathLoss: Swift.Double, xa: Swift.Double, ya: Swift.Double, za: Swift.Double, rotationOrder: Swift.Int32, generation: Swift.UInt32?, enabled: Swift.Bool, measured: Swift.Bool)
  required convenience public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NodeConfigTable) public class NodeConfigTable : CoreData.NSManagedObject {
  public func convertObject() -> SIRLCore.SirlNodeConfigs
  @objc override dynamic public func willSave()
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SIRLCore.NodeConfigTable {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SIRLCore.NodeConfigTable>
  @objc @NSManaged dynamic public var mlId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var custId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var appId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bldId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nodeConfig: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cacheDate: Foundation.NSDate? {
    @objc get
    @objc set
  }
}
@available(iOS 10.0, *)
extension SIRLCore.NodeConfigTable {
  @objc(addNodeConfigObject:) @NSManaged dynamic public func addToNodeConfig(_ value: SIRLCore.NodeConfig)
  @objc(removeNodeConfigObject:) @NSManaged dynamic public func removeFromNodeConfig(_ value: SIRLCore.NodeConfig)
  @objc(addNodeConfig:) @NSManaged dynamic public func addToNodeConfig(_ values: Foundation.NSSet)
  @objc(removeNodeConfig:) @NSManaged dynamic public func removeFromNodeConfig(_ values: Foundation.NSSet)
}
public class SessionTokenRequestInfo : Swift.Encodable {
  public init(mlId: Swift.Int32, pipsLibVer: Swift.String, appVer: Swift.String, timestamp: Swift.Int64? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RelevantNodes : Swift.Decodable {
  public var locations: [SIRLCore.SirlNodeConfigs]
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(Settings) public class Settings : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SIRLCore.Settings {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SIRLCore.Settings>
  @objc @NSManaged dynamic public var backgroundMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var autoWakeup: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var regionLocking: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var prediction: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var apiKey: Swift.String {
    @objc get
    @objc set
  }
}
public class SirlNodeConfigs : Swift.Decodable {
  public init(custID: Swift.UInt32, appID: Swift.UInt32, locID: Swift.UInt32, bldID: Swift.UInt32, mlId: Swift.UInt32? = nil, storeId: Swift.UInt32? = nil, nodeConfig: [SIRLCore.NodeConfigs]? = nil, blackList: [Swift.String]? = nil)
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func getNodeConfigTable() -> [pipsAPI.pips_node_setting]
  @available(iOS 10.0, *)
  public func save()
  @objc deinit
}
@available(iOS 10.0, *)
public enum SirlBundleHelper {
  public static func getResourceImage(name: Swift.String) -> UIKit.UIImage?
  public static func getResourceDataModleURL() -> Foundation.URL
  public static func getSDKVersionNumber() -> Swift.String
}
@available(iOS 10.0, *)
public struct GetMapLocationID : SIRLCore.APIRequest {
  public typealias Response = [SIRLCore.Location]
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public init(cust_id: Swift.UInt32, app_id: Swift.UInt32, loc_id: Swift.UInt32, bld_id: Swift.UInt32)
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 10.0, *)
public struct GetNodeConfigs : SIRLCore.APIRequest {
  public typealias Response = SIRLCore.SirlNodeConfigs
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public init(mlId: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 10.0, *)
public struct GetRelevantNodes : SIRLCore.APIRequest {
  public typealias Response = SIRLCore.RelevantNodes
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public init(macAddress: Swift.String, geoLocation: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 10.0, *)
public struct GetAisleRegionsString : SIRLCore.APIRequest {
  public typealias Response = SIRLCore.RawStringValue
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public let mlId: Swift.Int!
  public init(mlId: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol Cachable {
  associatedtype CacheType
  static func decode(_ data: Foundation.Data) -> Self.CacheType?
  func encode() -> Foundation.Data?
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, *)
public class SirlDataBase : ObjectiveC.NSObject {
  public static let shared: SIRLCore.SirlDataBase
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 10.0, *)
public struct SirlFeatureFlags : Swift.Decodable {
  public static var shared: SIRLCore.SirlFeatureFlags {
    get
  }
  public var _dictionary: Swift.Dictionary<Swift.String, Swift.String> {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init(dict: Swift.Dictionary<Swift.String, Swift.String>, singleton: Swift.Bool = false)
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class CacheManager {
  public static let shared: SIRLCore.CacheManager
  public func store<T>(key: Swift.String, object: T, memCaheOnly: Swift.Bool, completion: (() -> Swift.Void)?) where T : SIRLCore.Cachable
  public func retrive<T>(_ key: Swift.String, completion: @escaping (T?) -> Swift.Void) where T : SIRLCore.Cachable
  public func remove(_ key: Swift.String, completion: (() -> Swift.Void)?)
  public func getCoreDataContainer() -> CoreData.NSPersistentContainer
  public func clearCache()
  public func clearMapCache(mapID: Swift.String? = nil)
  @objc deinit
}
@available(iOS 10.0, *)
public class RawStringValue : Swift.Decodable {
  public init(value: Swift.String)
  required convenience public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SirlGeoFence : ObjectiveC.NSObject {
  public var requiredDwellDuration: Swift.Int?
  public var margin: Swift.Double?
  public var id: Swift.String?
  public var center: SIRLCore.SirlLocation?
  @objc convenience public init(dwellDuration: Swift.Int, margin: Swift.Double, id: Swift.String, center: SIRLCore.SirlLocation)
  @objc override dynamic public init()
  @objc deinit
}
public struct SirlSite : Swift.Decodable {
  public var mlId: Swift.UInt32!
  public var storeId: Swift.UInt32!
  public var name: Swift.String!
  public var address: Swift.String!
  public var timezone: Swift.String!
  public var channel: Swift.UInt8!
  public var location: SIRLCore.SirlSiteCordinate!
  public init(from decoder: any Swift.Decoder) throws
}
public struct SirlSiteCordinate : Swift.Decodable {
  public var lng: Swift.Double!
  public var lat: Swift.Double!
  public init(from decoder: any Swift.Decoder) throws
}
public enum HTTPParameter : Swift.CustomStringConvertible, Swift.Decodable {
  case string(Swift.String)
  case bool(Swift.Bool)
  case int(Swift.Int)
  case double(Swift.Double)
  public init(from decoder: any Swift.Decoder) throws
  public var description: Swift.String {
    get
  }
}
public enum Result<Value> {
  case success(Value)
  case failure(any Swift.Error)
}
public typealias ResultCallback<Value> = (SIRLCore.Result<Value>) -> Swift.Void
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, *)
open class SirlCoreImpl : ObjectiveC.NSObject, SIRLCore.PIPSDelegate {
  public var allowRegionLocking: Swift.Bool
  public var allowPrediction: Swift.Bool
  public var operationQueue: Dispatch.DispatchQueue {
    get
  }
  public static let shared: SIRLCore.SirlCoreImpl
  weak public var sirlMapAdapter: (any SIRLCore.SirlCoreMapDelegate)?
  public var dataSource: (any SIRLCore.SirlCoreDataSource)! {
    get
    set
  }
  public var getLibVersion: Swift.String {
    get
  }
  public var isDataSourceAvalible: Swift.Bool {
    get
  }
  public var isDataSourceInitialized: Swift.Bool {
    get
  }
  public var inActiveRegion: Swift.Bool {
    get
  }
  public var ML_ID: Swift.UInt32? {
    get
  }
  public var siteName: Swift.String? {
    get
  }
  public func executionLogConfig(pips: Swift.Bool? = nil, ble: Swift.Bool? = nil, debug: Swift.Bool? = nil, info: Swift.Bool? = nil, imu: Swift.Bool? = nil, speed: Swift.Bool? = nil, event: Swift.Bool? = nil)
  public var executionLog: SIRLCore.SirlTripExecutionLogRecorder? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  public func startScan()
  public func startRecordSirlPackets(fileUrl: Foundation.URL)
  public func stopRecordSirlPackets()
  public var isScanning: Swift.Bool {
    get
  }
  public func stopScan()
  public func pauseScan()
  public func clearLocations()
  public func didGetNewPosition(_ position: SIRLCore.SirlLocation, _ velocity: SIRLCore.SirlLocation, _ confidence: Swift.Double)
  public func didGetNewAIInfo(_ aiInfo: [pipsAPI.pips_ai_node_info])
  public func didSendDebugMessage(_ msg: Swift.String)
  public func updateSettings(backgroundMode: Swift.Bool? = nil, autoWakeup: Swift.Bool? = nil, regionLocking: Swift.Bool? = nil, prediction: Swift.Bool? = nil, apiKey: Swift.String? = "", endPoint: Swift.String? = nil)
}
@available(iOS 10.0, *)
extension SIRLCore.SirlCoreImpl : SIRLCore.SirlCoreDataSourceDelegate, SIRLCore.SirlMapLocationListenerDelegate {
  public func didStartDataSource()
  public func didStopDataSource()
  public func didTriggerBackgroundTaskTermination()
  public func didChangeSourceAvalibility(avaliable: Swift.Bool, state: CoreBluetooth.CBManagerState?)
  public func didReceiveSirlPacket(packet: SIRLCore.SirlBLEPacket, timeElap: Swift.Int64)
  public func didDetectLocationChange(mlId: Swift.UInt32)
  public func didDetectReplayConfig(mlid: Swift.UInt32, config: [pipsAPI.pips_node_setting])
}
@available(iOS 10.0, *)
extension SIRLCore.SirlCoreImpl {
  public func didInitializedSirlRegion()
}
@available(iOS 10.0, *)
extension SIRLCore.SirlCoreImpl {
  public static var testTimer: Foundation.Timer?
  @objc dynamic public func setTestLocation(_ mlid: Swift.UInt32)
  public func setTestUserLocation(x: Swift.Double, y: Swift.Double, z: Swift.Double)
  public func disabelTestUserLocation(x: Swift.Double, y: Swift.Double, z: Swift.Double)
}
public struct NULLCodable : Swift.Codable {
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SimpleResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public protocol APIRequest : Swift.Encodable {
  associatedtype Response : Swift.Decodable
  associatedtype RequestBody : Swift.Encodable
  var resourceName: Swift.String { get }
  var requestMethod: Swift.String { get }
  var hasParams: Swift.Bool { get }
  var requestBody: Self.RequestBody { get }
}
public enum URLQueryEncoder {
}
@available(iOS 10.0, *)
public class ZipFileDownloader {
  public init()
  public func download(url: Swift.String, to destURL: Swift.String, completion: @escaping () -> Swift.Void)
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
@available(iOS 10.0, *)
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
@available(iOS 10.0, *)
public class Reachability {
  public typealias NetworkReachable = (SIRLCore.Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (SIRLCore.Reachability) -> Swift.Void
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: SIRLCore.Reachability.NetworkStatus, b: SIRLCore.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: SIRLCore.Reachability.Connection, b: SIRLCore.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: SIRLCore.Reachability.NetworkReachable?
  public var whenUnreachable: SIRLCore.Reachability.NetworkUnreachable?
  @available(swift, deprecated: 4.0, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(swift, deprecated: 4.0, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: SIRLCore.Reachability.Connection {
    get
  }
  public var connection: SIRLCore.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
@available(iOS 10.0, *)
extension SIRLCore.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@available(iOS 10.0, *)
public class SirlAPIClient {
  public static let shared: SIRLCore.SirlAPIClient
  public var customEndPoint: Swift.String? {
    get
    set
  }
  public func send<T>(_ request: T, withAccessToken accessToken: Swift.String = "", baseURL: Swift.String = "", completion: @escaping SIRLCore.ResultCallback<T.Response>) where T : SIRLCore.APIRequest
  public init()
  @objc deinit
}
@available(iOS 10.0, *)
public struct GetSessionToken : SIRLCore.APIRequest {
  public typealias Response = SIRLCore.SirlSessionToken
  public typealias RequestBody = SIRLCore.SessionTokenRequestInfo
  public var requestBody: SIRLCore.SessionTokenRequestInfo {
    get
  }
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public init(mlId: Swift.Int32, pipsLibVer: Swift.String, appVer: Swift.String, requestTimeStamp: Swift.Int64? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @available(iOS 10.0, *)
@objc(SessionToken) public class SessionToken : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@available(iOS 10.0, *)
extension SIRLCore.SessionToken {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SIRLCore.SessionToken>
  @objc @NSManaged dynamic public var tripID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.NSDate? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var token: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mlID: Swift.Int32 {
    @objc get
    @objc set
  }
}
@available(iOS 10.0, *)
public struct SirlSessionToken : Swift.Decodable {
  public var token: Swift.String!
  public init(from decoder: any Swift.Decoder) throws
  public init(token: Swift.String)
}
@_inheritsConvenienceInitializers @available(iOS 10.0, *)
@objc(TripData) public class TripData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@available(iOS 10.0, *)
extension SIRLCore.TripData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SIRLCore.TripData>
  @objc @NSManaged dynamic public var completed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tripID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var fileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeUpdate: Foundation.NSDate? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class SirlTripDataReporter {
  public static let shared: SIRLCore.SirlTripDataReporter
  public var executionLog: SIRLCore.SirlTripExecutionLogRecorder? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class SirlTripDataRecorder {
  @objc deinit
}
@available(iOS 10.0, *)
public class SirlTripDataUploader {
  public static let shared: SIRLCore.SirlTripDataUploader
  public enum dataType : Swift.String {
    case position
    case ai_data
    case executionLog
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum mimeType : Swift.String {
    case txt
    case zip
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func upload(withUserSessionToken userSessionToken: Swift.String, dataType: SIRLCore.SirlTripDataUploader.dataType, file: Foundation.Data, MIMEType: SIRLCore.SirlTripDataUploader.mimeType, baseURL: Swift.String = "", completion: @escaping ((any Swift.Error)?, Foundation.URLResponse?) -> Swift.Void)
  public func upload(withUserSessionToken userSessionToken: Swift.String, dataType: Swift.String, file: Foundation.Data, MIMEType: SIRLCore.SirlTripDataUploader.mimeType, baseURL: Swift.String = "", completion: @escaping ((any Swift.Error)?, Foundation.URLResponse?) -> Swift.Void)
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class SirlTripExecutionLogRecorder : SIRLCore.SirlTripDataRecorder {
  public enum logType : Swift.String {
    case ble
    case imu
    case pips
    case speed
    case i
    case d
    case event
    case ueid
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum eventType : Swift.String {
    case core
    case retail
    case map
    case location
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum sessionEventType : Swift.String {
    case start
    case finish
    case request
    case receive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum bleEventType : Swift.String {
    case poweredOn
    case poweredOff
    case unsupported
    case resetting
    case unauthorized
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum routeEventType : Swift.String {
    case cancel
    case complete
    case reroute_manual
    case reroute_auto
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum retailEventType : Swift.String {
    case search
    case route
    case missingProduct
    case scan
    case promotion
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func turnOnExcutionLog(pips: Swift.Bool? = nil, ble: Swift.Bool? = nil, debug: Swift.Bool? = nil, info: Swift.Bool? = nil, imu: Swift.Bool? = nil, speed: Swift.Bool? = nil, event: Swift.Bool? = nil)
  public func feed(position: SIRLCore.SirlLocation, velocity: SIRLCore.SirlLocation, confidence: Swift.Double)
  public func feed(dataPacket: SIRLCore.SirlBLEPacket, time_ms: Swift.Int64)
  public func ueid(id: Swift.UInt16)
  public func info(msg: Swift.String)
  public func debug(msg: Swift.String)
  public func errorEvent(msg: Swift.String)
  public func sessionEvent(type: SIRLCore.SirlTripExecutionLogRecorder.sessionEventType)
  public func sessionEvent(type: SIRLCore.SirlTripExecutionLogRecorder.sessionEventType, msg: Swift.String)
  public func bleEvent(type: SIRLCore.SirlTripExecutionLogRecorder.bleEventType)
  public func routeEvent(type: SIRLCore.SirlTripExecutionLogRecorder.routeEventType)
  public func reportEvent(type: SIRLCore.SirlTripExecutionLogRecorder.eventType, event: Swift.String, data: Swift.String)
  public func reportExternal(type: Swift.String, data: Swift.String)
  public func retailEvent(type: SIRLCore.SirlTripExecutionLogRecorder.retailEventType, content: Swift.String)
  public func productScanEvent(id: Swift.String, type: Swift.String, rightSide: Swift.Bool)
  @objc deinit
}
@available(iOS 10.0, *)
public protocol SirlMapLocationListenerDelegate : AnyObject {
  func didDetectLocationChange(mlId: Swift.UInt32)
}
@available(iOS 10.0, *)
extension SIRLCore.SirlMapLocationListenerDelegate {
  public func didDetectLocationChange(mlId: Swift.UInt32)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class SirlBLEPacket : ObjectiveC.NSObject {
  @objc deinit
}
@available(iOS 10.0, *)
public protocol PIPSDelegate : AnyObject {
  func didGetNewPosition(_ position: SIRLCore.SirlLocation, _ velocity: SIRLCore.SirlLocation, _ confidence: Swift.Double)
  func didGetNewAIInfo(_ aiInfo: [pipsAPI.pips_ai_node_info])
  func didChangeScanMode(_ mode: SIRLCore.ScanMode)
  func didSendDebugMessage(_ msg: Swift.String)
}
@available(iOS 10.0, *)
extension SIRLCore.PIPSDelegate {
  public func didChangeScanMode(_ mode: SIRLCore.ScanMode)
  public func didSendDebugMessage(_ msg: Swift.String)
  public func didGetNewAIInfo(_ aiInfo: [pipsAPI.pips_ai_node_info])
}
@available(iOS 10.0, *)
extension pipsAPI.pips_ai_node_info {
  public var stringValue: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, *)
public class PIPS : ObjectiveC.NSObject {
  public var movementMode: SIRLCore.MovementMode
  public var currentPosition: SIRLCore.SirlLocation {
    get
    set
  }
  public var currentVelocity: SIRLCore.SirlLocation? {
    get
  }
  public var pipsVelocity: SIRLCore.SirlLocation {
    get
  }
  public var confidence: Swift.Double {
    get
  }
  public var x_Cordinate: Swift.Double {
    get
  }
  public var y_Cordinate: Swift.Double {
    get
  }
  public var z_Cordinate: Swift.Double {
    get
  }
  public var currentMode: SIRLCore.ScanMode {
    get
    set
  }
  public var delayCtr: Swift.Int32 {
    get
    set
  }
  public var loopCtr: Swift.Int32 {
    get
    set
  }
  public var debugMSG: Swift.String {
    get
    set
  }
  @objc override dynamic public init()
  public func pips_reset()
  public func getVersion() -> Swift.String
  public func feedDataPacket(dataPacket: Swift.String, rssi: Foundation.NSNumber, time_ms: Swift.Int64)
  public func setNodes(_ nodesSettingTable: [pipsAPI.pips_node_setting])
  public func getTable() -> Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<pipsAPI.pips_node_setting>?>
  @objc deinit
}
@available(iOS 10.0, *)
public struct GetNearbySite : SIRLCore.APIRequest {
  public typealias Response = SIRLCore.SirlSite
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public init(lat: Swift.Double, lng: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 10.0, *)
public protocol SirlCoreDataSource : AnyObject {
  func start() -> Swift.Bool
  func pause()
  func stop()
  func updateBackgroundState()
  func requestDataSourceAvalibility()
  func initializeDataSource(completion: (() -> Swift.Void)?)
  func setBleChannel(channel: Swift.UInt8) -> Swift.Bool
  var isSourceAvalible: Swift.Bool { get }
  var isSourceInitialized: Swift.Bool { get }
  var ueid: Swift.UInt16 { get set }
  var isScanning: Swift.Bool { get }
  var isBackgroundModeEnable: Swift.Bool { get set }
  var backgroundModeRunningIfEnabled: Swift.Bool { get set }
  var allowDataReport: Swift.Bool { get }
  var locationServiceEnable: Swift.Bool { get }
  var delegate: (any SIRLCore.SirlCoreDataSourceDelegate)? { get set }
}
@available(iOS 10.0, *)
extension SIRLCore.SirlCoreDataSource {
  public func updateBackgroundState()
}
@available(iOS 10.0, *)
public protocol SirlCoreDataSourceDelegate : AnyObject {
  func didReceiveSirlPacket(packet: SIRLCore.SirlBLEPacket, timeElap: Swift.Int64)
  func didChangeSourceAvalibility(avaliable: Swift.Bool, state: CoreBluetooth.CBManagerState?)
  func didStartDataSource()
  func didStopDataSource()
  func didTriggerBackgroundTaskTermination()
  func didDetectReplayConfig(mlid: Swift.UInt32, config: [pipsAPI.pips_node_setting])
}
@available(iOS 10.0, *)
extension SIRLCore.SirlCoreDataSourceDelegate {
  public func didChangeSourceAvalibility(avaliable: Swift.Bool)
  public func didTriggerBackgroundTaskTermination()
  public func didDetectReplayConfig(mlid: Swift.UInt32, config: [pipsAPI.pips_node_setting])
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, *)
public class SirlBLEAdapter : ObjectiveC.NSObject, SIRLCore.SirlCoreDataSource {
  weak public var delegate: (any SIRLCore.SirlCoreDataSourceDelegate)?
  public enum backgroundModeType {
    case location
    case backgroundTask
    public static func == (a: SIRLCore.SirlBLEAdapter.backgroundModeType, b: SIRLCore.SirlBLEAdapter.backgroundModeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var currentBackgroundModeType: SIRLCore.SirlBLEAdapter.backgroundModeType
  public var isSourceAvalible: Swift.Bool {
    get
  }
  public var locationServiceEnable: Swift.Bool {
    get
  }
  public var isSourceInitialized: Swift.Bool {
    get
  }
  public var ueid: Swift.UInt16 {
    get
    set
  }
  public var allowDataReport: Swift.Bool {
    get
  }
  public func requestDataSourceAvalibility()
  public var isBackgroundModeEnable: Swift.Bool {
    get
    set
  }
  public var isScanning: Swift.Bool {
    get
  }
  public var backgroundModeRunningIfEnabled: Swift.Bool {
    get
    set
  }
  @objc convenience override dynamic public init()
  public init(queue: Dispatch.DispatchQueue)
  public func registerBackgroundTask()
  public func setBleChannel(channel: Swift.UInt8) -> Swift.Bool
  public func updateBackgroundState()
  public func start() -> Swift.Bool
  public func initializeDataSource(completion: (() -> Swift.Void)?)
  public func stop()
  public func pause()
  @objc deinit
}
@available(iOS 10.0, *)
extension SIRLCore.SirlBLEAdapter : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
}
@available(iOS 10.0, *)
extension SIRLCore.SirlBLEAdapter : CoreBluetooth.CBPeripheralManagerDelegate {
  @objc dynamic public func peripheralManagerDidUpdateState(_ peripheral: CoreBluetooth.CBPeripheralManager)
  @objc dynamic public func peripheralManagerDidStartAdvertising(_ peripheral: CoreBluetooth.CBPeripheralManager, error: (any Swift.Error)?)
}
@available(iOS 10.0, *)
extension SIRLCore.SirlBLEAdapter : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
public let SIRL_NODE_MANUFACTORY_ID: Foundation.Data
public let SIRL_UUID: CoreBluetooth.CBUUID
public let SIRL_PAYLOAD_ID: Swift.String
public let SIRL_DATAPAYLOAD_ID: Swift.String
public let SIRL_COMPANY_ID: Swift.String
public let DEAFAULT_BLE_CHANNEL: Swift.UInt8
public let BLE_CHANNELS: [Swift.UInt8]
public let SIRL_USER_CACHE_KEY: Swift.String
public let SIRL_USER_META_CACHE_KEY: Swift.String
public let WESTSIDE_98th_MAP_ID: Swift.UInt32
public enum ScanMode {
  case general
  case standing
  case walking
  public static func == (a: SIRLCore.ScanMode, b: SIRLCore.ScanMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MovementMode {
  case standing
  case walking
  public static func == (a: SIRLCore.MovementMode, b: SIRLCore.MovementMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TiledViewContentMode {
  case contentToFit
  case contentToFill
  case mapToFit
  public static func == (a: SIRLCore.TiledViewContentMode, b: SIRLCore.TiledViewContentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum barCodeType {
  case upca
  case upce
  case qr
  case code39
  case code39Mod43
  case code93
  case code128
  case ean8
  case aztec
  case pdf417
  case itf14
  case dataMatrix
  case interleaved2of5
  public static func == (a: SIRLCore.barCodeType, b: SIRLCore.barCodeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BuildConfig {
}
@objc public class SirlLocation : ObjectiveC.NSObject {
  @objc public var x: Swift.Double
  @objc public var y: Swift.Double
  @objc public var z: Swift.Double
  @objc public static var zero: SIRLCore.SirlLocation
  @objc public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
  @objc public var ArrayValue: [Swift.Double] {
    @objc get
  }
  @objc public var xyString: Swift.String {
    @objc get
  }
  @objc public func getDistance2D(point: SIRLCore.SirlLocation) -> Swift.Double
  @objc deinit
}
@objc public protocol SirlCoreDelegate {
  @objc optional func didStartSirlNodeScan()
  @objc optional func didStopSirlNodeScan()
  @objc optional func didStartFindingNearbySite()
  @objc optional func didFoundNearbySite(_ found: Swift.Bool)
  @objc optional func didGetNewPosition(_ position: SIRLCore.SirlLocation)
  @objc optional func didChangeBLEAvalibility(_ blePowerOn: Swift.Bool)
  @objc optional func didReceiveDebugMessage(_ msg: Swift.String)
  @objc optional func didDetectMapLocation(mlId: Swift.UInt32)
  @objc optional func didChangeLocationServiceAuthorization(_ status: Swift.String)
  @objc optional func didEnteredSirlRegion()
  @objc optional func didExitedSirlRegion()
  @objc optional func didInitializedSirlRegion()
  @objc optional func didEnterGeoFence(id: Swift.String)
  @objc optional func didReceiveSessionToken(token: Swift.String)
}
@available(iOS 10.0, *)
public protocol SirlCoreMapDelegate : AnyObject {
  func didGetNewPosition(_ position: SIRLCore.SirlLocation)
  func didDetectMapLocation(mlId: Swift.UInt32)
}
@available(iOS 10.0, *)
extension SIRLCore.SirlCoreMapDelegate {
  public func didGetNewPosition(_ position: SIRLCore.SirlLocation)
  public func didDetectMapLocation(mlId: Swift.UInt32)
}
@available(iOS 10.0, *)
open class SirlScannerSetting {
  public var backgroundMode: Swift.Bool {
    get
  }
  public var autoWakeup: Swift.Bool {
    get
  }
  public var regionLocking: Swift.Bool {
    get
  }
  public var prediction: Swift.Bool {
    get
  }
  public var apiKey: Swift.String {
    get
  }
  public static let shared: SIRLCore.SirlScannerSetting
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class SirlCore : ObjectiveC.NSObject {
  @objc public static let shared: SIRLCore.SirlCore
  public var ML_ID: Swift.UInt32? {
    get
  }
  public var siteName: Swift.String? {
    get
  }
  @objc public func setSingleLocation(mlID: Swift.UInt32)
  @objc public func setAutoDetectLocation()
  public func updateSettings(backgroundMode: Swift.Bool? = nil, autoWakeup: Swift.Bool? = nil, regionLocking: Swift.Bool? = nil, prediction: Swift.Bool? = nil, apiKey: Swift.String? = "", endPoint: Swift.String? = nil)
  @objc public func updateSetting(backgroundMode: Swift.Bool, apiKey: Swift.String)
  @objc public func updateSetting(autoWakeup: Swift.Bool)
  @objc public func updateSetting(apiKey: Swift.String)
  @objc public func updateSetting(backgroundMode: Swift.Bool, regionLocking: Swift.Bool, prediction: Swift.Bool, apiKey: Swift.String)
  public func startScan()
  public func stopScan()
  @objc public func addDelegate(delegate: any SIRLCore.SirlCoreDelegate)
  @objc public func setTestIds(roomId: Swift.UInt32, nodeId: Swift.UInt32)
  public func getTestIds() -> (roomId: Swift.UInt32, nodeId: Swift.UInt32)
  @objc public func setTestLocation(type: Swift.String = "Tutorial")
  @objc public func setTestUserLocation(_ x: Swift.Double = 11.5, _ y: Swift.Double = 4.5, _ z: Swift.Double = 1)
  @objc override dynamic public init()
  @objc deinit
}
extension SIRLCore.NodeBlackList {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SIRLCore.NodeBlackList>
  @objc @NSManaged dynamic public var cacheDate: Foundation.NSDate? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var macAddress: Swift.String? {
    @objc get
    @objc set
  }
}
extension SIRLCore.SirlLogger.externalTag : Swift.Equatable {}
extension SIRLCore.SirlLogger.externalTag : Swift.Hashable {}
extension SIRLCore.SirlLogger.externalTag : Swift.RawRepresentable {}
extension SIRLCore.SirlLogger.externalStr : Swift.Equatable {}
extension SIRLCore.SirlLogger.externalStr : Swift.Hashable {}
extension SIRLCore.SirlLogger.externalStr : Swift.RawRepresentable {}
extension SIRLCore.SirlLogger.promoEvent : Swift.Equatable {}
extension SIRLCore.SirlLogger.promoEvent : Swift.Hashable {}
extension SIRLCore.SirlLogger.promoEvent : Swift.RawRepresentable {}
@available(iOS 10.0, *)
@available(*, unavailable, renamed: "Connection")
extension SIRLCore.Reachability.NetworkStatus : Swift.Equatable {}
@available(iOS 10.0, *)
@available(*, unavailable, renamed: "Connection")
extension SIRLCore.Reachability.NetworkStatus : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.Reachability.Connection : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.Reachability.Connection : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripDataUploader.dataType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripDataUploader.dataType : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripDataUploader.dataType : Swift.RawRepresentable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripDataUploader.mimeType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripDataUploader.mimeType : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripDataUploader.mimeType : Swift.RawRepresentable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.logType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.logType : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.logType : Swift.RawRepresentable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.eventType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.eventType : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.eventType : Swift.RawRepresentable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.sessionEventType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.sessionEventType : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.sessionEventType : Swift.RawRepresentable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.bleEventType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.bleEventType : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.bleEventType : Swift.RawRepresentable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.routeEventType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.routeEventType : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.routeEventType : Swift.RawRepresentable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.retailEventType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.retailEventType : Swift.Hashable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlTripExecutionLogRecorder.retailEventType : Swift.RawRepresentable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlBLEAdapter.backgroundModeType : Swift.Equatable {}
@available(iOS 10.0, *)
extension SIRLCore.SirlBLEAdapter.backgroundModeType : Swift.Hashable {}
extension SIRLCore.ScanMode : Swift.Equatable {}
extension SIRLCore.ScanMode : Swift.Hashable {}
extension SIRLCore.MovementMode : Swift.Equatable {}
extension SIRLCore.MovementMode : Swift.Hashable {}
extension SIRLCore.TiledViewContentMode : Swift.Equatable {}
extension SIRLCore.TiledViewContentMode : Swift.Hashable {}
extension SIRLCore.barCodeType : Swift.Equatable {}
extension SIRLCore.barCodeType : Swift.Hashable {}
