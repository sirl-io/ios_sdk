// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name SIRLRetail
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Foundation
import SIRLCore
import SIRLMap
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension SIRLCore.SirlCore {
  @objc dynamic public func recordProductScan(id: Swift.String, type: Swift.String, rightSide: Swift.Bool)
}
public let sirlDarkBtnColor: UIKit.UIColor
public let sirlLightBtnColor: UIKit.UIColor
public let sirlWhite: UIKit.UIColor
public let sirlBlack: UIKit.UIColor
public let sirlLightGrey: UIKit.UIColor
@available(iOS 10.0, *)
@objc public protocol SirlSearchBarViewDelegate {
  @objc func didSelectProduct(location: SIRLCore.SirlLocation, product: SIRLRetail.StoreProduct)
  @objc func didPressSearchBarButton()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
@IBDesignable @objc @_Concurrency.MainActor @preconcurrency public class SirlSearchBar : UIKit.UIView, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SIRLRetail.SirlSearchBarViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var mapView: SIRLMap.SirlMapView?
  @_Concurrency.MainActor @preconcurrency public var menuImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var backImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var closeImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var borderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var borderCornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var searchDelay: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var searchResultBackground: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc @_Concurrency.MainActor @preconcurrency public func textFieldDidChangeContent()
  @_Concurrency.MainActor @preconcurrency public func clearSearchBar()
  @_Concurrency.MainActor @preconcurrency public func reportIncorrectDestination(prodcutID: Swift.String)
  @objc deinit
}
public class Coupon : Swift.Decodable {
  public var id: Swift.Int?
  public var title: Swift.String?
  public var description: Swift.String?
  public var finePrint: Swift.String?
  public var updatedOn: Swift.String?
  public var type: Swift.String?
  public var ttlSeconds: Swift.Int?
  public var code: Swift.String?
  public var expiration: Foundation.Date?
  public var isClaimable: Swift.Bool {
    get
  }
  public init(id: Swift.Int? = nil, title: Swift.String? = nil, description: Swift.String? = nil, finePrint: Swift.String? = nil, updatedOn: Swift.String? = nil, type: Swift.String? = nil, ttlSeconds: Swift.Int? = nil, code: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public class HelpRequestRespond : Swift.Decodable {
  public var requestStatus: Swift.Bool?
  public init(requestStatus: Swift.Bool = false)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class StoreProduct : ObjectiveC.NSObject, Swift.Codable {
  public var id: Swift.Int?
  public var mlId: Swift.Int?
  public var productId: Swift.String?
  public var createdOn: Swift.String?
  public var updatedOn: Swift.String?
  public var xLoc: Swift.Double?
  public var yLoc: Swift.Double?
  public var zLoc: Swift.Double?
  public var product: SIRLRetail.Product?
  public var location: SIRLCore.SirlLocation? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(mlId: Swift.Int? = nil, productId: Swift.String? = nil, xLoc: Swift.Double? = nil, yLoc: Swift.Double? = nil, zLoc: Swift.Double? = nil)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Product : Swift.Decodable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var image: Swift.String?
  public var createdOn: Swift.String?
  public var updatedOn: Swift.String?
  public var sourceId: Swift.String?
  public init(id: Swift.String? = nil, name: Swift.String? = nil, image: Swift.String? = nil, createdOn: Swift.String? = nil, updatedOn: Swift.String? = nil, sourceId: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class StorePromotions : Swift.Decodable {
  public var promotions: [SIRLRetail.Promotion]?
  public func fetchLocations(completion: (((any Swift.Error)?) -> Swift.Void)?)
  public func getPromotion(_ id: Swift.String) -> SIRLRetail.Promotion?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class Promotion : SIRLCore.SirlGeoFence, Swift.Decodable {
  public var companyId: Swift.Int?
  public var expires: Swift.String?
  public var image: Swift.String?
  public var storeId: Swift.Int?
  public var title: Swift.String?
  public var details: Swift.String?
  public var promotionCode: Swift.String?
  public var allowNavigation: Swift.Bool?
  public var promoID: Swift.Int?
  required convenience public init(from decoder: any Swift.Decoder) throws
  public init(companyID: Swift.Int, promoID: Swift.Int, expires: Swift.String, image: Swift.String?, storeId: Swift.Int, geoId: Swift.String, requiredDwellDuration: Swift.Int, margin: Swift.Double, title: Swift.String, details: Swift.String, navigate: Swift.Bool?, promotionCode: Swift.String?)
  public func getExpireDate() -> Foundation.Date?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StoreInfo : Swift.Decodable {
  public var name: Swift.String!
  public var addesss: Swift.String!
  public var promotionsUrl: Swift.String?
  public var id: Swift.Int!
  public var location: SIRLRetail.SirlGeoLocation?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SirlGeoLocation : Swift.Decodable {
  public var lat: Swift.Double!
  public var lng: Swift.Double!
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 10.0, *)
public struct AddStoreProduct : SIRLCore.APIRequest {
  public typealias Response = SIRLRetail.StoreProduct
  public typealias RequestBody = SIRLRetail.StoreProduct
  public var requestBody: SIRLRetail.StoreProduct {
    get
  }
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public init(storeProduct: SIRLRetail.StoreProduct)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class SIRLCouponService {
  public static let shared: SIRLRetail.SIRLCouponService
  weak public var delegate: (any SIRLRetail.CouponServiceDelegate)?
  public var allowNotificationAnimation: Swift.Bool {
    get
    set
  }
  public func getAvailableCoupons(completion: @escaping (_ coupons: [SIRLRetail.Coupon]) -> Swift.Void)
  public func clearPromotionCoupons()
  public func insertCoupon(at index: Swift.Int, coupon: SIRLRetail.Coupon)
  public func addPromotionCoupon(promoCoupon: SIRLRetail.Coupon)
  public func claimCoupons(with: SIRLRetail.Coupon, completion: @escaping (_ calimed_coupon: SIRLRetail.Coupon?) -> Swift.Void)
  public func addToIgnoreList(id: Swift.Int)
  @objc deinit
}
@available(iOS 10.0, *)
extension SIRLRetail.SIRLCouponService : SIRLRetail.CouponViewDelegate {
  public func addDefaultView(to view: UIKit.UIView, above subview: UIKit.UIView? = nil)
  public func dismissDefaultView()
  public func loadCoupons()
  @objc dynamic public func didDismissCoupon(id: Swift.Int)
  @objc dynamic public func didClickEmailRegistration(at: Swift.Int)
  public func loadCoupons(from coupons: [SIRLRetail.Coupon])
  public func hideEmailRegistrationButton(set: Swift.Bool)
  public func reloadCouponAt(index: Swift.Int)
  public func reloadAllCoupons()
  public func notifyIfAvalible()
  @objc dynamic public func didLoadCoupons()
}
@available(iOS 10.0, *)
public struct FindStoreItems : SIRLCore.APIRequest {
  public typealias Response = [SIRLRetail.StoreProduct]
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public init(mlId: Swift.Int, productIds: [Swift.String] = [String]())
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 10.0, *)
public struct GetRelaventStoreItems : SIRLCore.APIRequest {
  public typealias Response = [SIRLRetail.StoreProduct]
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public init(partialText: Swift.String? = nil, mlId: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 10.0, *)
public struct RequestAssistant : SIRLCore.APIRequest {
  public typealias Response = SIRLRetail.HelpRequestRespond
  public typealias RequestBody = SIRLCore.NULLCodable
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public var resourceName: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public init(ML_ID: Swift.Int, FCM_token: Swift.String, location: SIRLCore.SirlLocation)
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 10.0, *)
public struct FetchPromotions : SIRLCore.APIRequest {
  public typealias Response = SIRLRetail.StorePromotions
  public typealias RequestBody = SIRLCore.NULLCodable
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var hasParams: Swift.Bool {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(storeId: Swift.Int)
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class PromotionService {
  public static let shared: SIRLRetail.PromotionService
  public func fetchPromotions(completion: @escaping (SIRLRetail.StorePromotions?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
public class StoreInfomation {
  public static var shared: SIRLRetail.StoreInfomation
  public func getInfo(mlId: Swift.Int, completion: ((SIRLRetail.StoreInfo?) -> Swift.Void)?)
  @objc deinit
}
@objc public protocol CouponViewDelegate {
  @objc optional func didDismissCoupon(id: Swift.Int)
  @objc optional func didClickEmailRegistration(at index: Swift.Int)
  @objc optional func didLoadCoupons()
}
@objc public protocol CouponServiceDelegate {
  @objc optional func didDismissCoupon(id: Swift.Int)
  @objc optional func didClickEmailRegistration(at index: Swift.Int)
}
@available(iOS 10.0, *)
public protocol SirlBarCodeScannerDelegate : AnyObject {
  func didFoundBarCode(barCodeType: SIRLCore.barCodeType, value: Swift.String)
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, *)
@IBDesignable @_Concurrency.MainActor @preconcurrency open class SirlBarCodeScanner : UIKit.UIView, AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SIRLRetail.SirlBarCodeScannerDelegate)?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var scanFramColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func config()
  @_Concurrency.MainActor @preconcurrency public func startScan()
  @_Concurrency.MainActor @preconcurrency public func stopScan()
  @_Concurrency.MainActor @preconcurrency @objc public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
  @objc deinit
}
