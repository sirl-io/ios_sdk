// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SIRLMap
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
import SIRLCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import os.log
import os
@available(iOS 10.0, *)
public struct TileManager {
  public var downSizeSourceImage: Swift.Bool
  public init(destImageSize: Swift.Int = 60, sourceImageDownSizingTileSize: Swift.Int = 20, tileSize: Swift.Int = 256)
  public func urlOfTiledImage(named imageName: Swift.String) -> Foundation.URL
  public func urlOfPlaceholderOfImage(named imageName: Swift.String) -> Foundation.URL?
  public func removeTilesForImage(named imageName: Swift.String)
  public func clearCache()
  public func needsTilingImage(in url: Foundation.URL) -> Swift.Bool
  public func tilesMadeForImage(named imageName: Swift.String) -> Swift.Bool
  public func sizeOfTiledImage(named imageName: Swift.String) -> CoreFoundation.CGSize?
  public func sizeOfCordSpace(named imageName: Swift.String) -> CoreFoundation.CGSize?
  public func checkCacheDate(named imageName: Swift.String) -> Foundation.Date?
  public func resolutionForImage(in url: Foundation.URL) throws -> CoreFoundation.CGSize
  public func destinationResolutionForImage(in url: Foundation.URL) throws -> CoreFoundation.CGSize
  public func totalMBForImage(in url: Foundation.URL) throws -> CoreFoundation.CGFloat
  public func makeTiledImage(for url: Foundation.URL, placeholderCompletion: @escaping (Foundation.URL?, Swift.Error?) -> Swift.Void, tilingCompletion: @escaping (Swift.String?, CoreFoundation.CGSize?, Swift.Error?) -> Swift.Void)
}
public class SirlMapObject : Swift.Decodable {
  public init(mapID: Swift.Int, x_max: Swift.Double, y_max: Swift.Double, x_min: Swift.Double, y_min: Swift.Double, mapPixcelSize: CoreFoundation.CGSize, tileSet: Swift.String)
  required convenience public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public struct RouteNode : Swift.Decodable {
  public var location: SIRLCore.SirlLocation {
    get
  }
  public init(x: Swift.Double, y: Swift.Double)
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 10.0, *)
public struct GetLocationMap : SIRLCore.APIRequest {
  public typealias Response = SIRLMap.SirlMapObject
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public init(mapId: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct GetLocationGeoMap : SIRLCore.APIRequest {
  public typealias Response = SIRLMap.SirlGeoMapObject
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String
  public var requestMethod: Swift.String {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public init(map_id: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 10.0, *)
public struct GetRouteToLocation : SIRLCore.APIRequest {
  public typealias Response = [SIRLMap.RouteNode]
  public typealias RequestBody = SIRLCore.NULLCodable
  public var resourceName: Swift.String {
    get
  }
  public var requestMethod: Swift.String {
    get
  }
  public var requestBody: SIRLCore.NULLCodable {
    get
  }
  public let mlId: Swift.Int?
  public let routeTo: Swift.String?
  public let xCurrent: Swift.Double?
  public let yCurrent: Swift.Double?
  public init(mlId: Swift.Int? = nil, destinations: [SIRLCore.SirlLocation]? = nil, currentLocation: SIRLCore.SirlLocation? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class SirlFloorObject : Swift.Decodable {
  public init(x: Swift.Double, y: Swift.Double, name: Swift.String, shortName: Swift.String)
  required convenience public init(from decoder: Swift.Decoder) throws
  @_hasMissingDesignatedInitializers public class Layer : Swift.Decodable {
    required convenience public init(from decoder: Swift.Decoder) throws
    @objc deinit
  }
  @objc deinit
}
@available(iOS 10.0, *)
public class SirlMapDownLoader {
  public init()
  public func downloadTiles(url: Swift.String, ML_ID: Swift.String, completion: @escaping (Foundation.URL) -> Swift.Void)
  public func downloadGeo(url: Swift.String, ML_ID: Swift.String, completion: @escaping (Foundation.URL) -> Swift.Void)
  @objc deinit
}
@objc @available(iOS 10.0, *)
open class LocateUserButtonLayer : QuartzCore.CALayer {
  open var color: UIKit.UIColor
  open var color2: UIKit.UIColor
  open var color3: UIKit.UIColor
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSublayers()
  @objc override dynamic open func layoutIfNeeded()
  open func addBackGroundHover()
  open func removeBackGroundHover()
  open func customUIChanges()
  @objc deinit
}
@objc @available(iOS 10.0, *)
open class RoutingButtonLayer : QuartzCore.CALayer {
  open var color: UIKit.UIColor
  open var color2: UIKit.UIColor
  open var color3: UIKit.UIColor
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSublayers()
  @objc override dynamic open func layoutIfNeeded()
  open func addBackGroundHover()
  open func removeBackGroundHover()
  @objc deinit
}
public class SirlGeoMapObject : Swift.Decodable {
  public init(ml_id: Swift.Int, x_max: Swift.Double, y_max: Swift.Double, x_min: Swift.Double, y_min: Swift.Double, angleOffset: Swift.Double, origin: CoreLocation.CLLocationCoordinate2D, defaultZoom: Swift.Double, geoJson: Swift.String, floors: [SIRLMap.SirlFloorObject])
  required convenience public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
open class NavigationMarker : QuartzCore.CALayer {
  open var lightBlue: UIKit.UIColor
  open var dakBlue: UIKit.UIColor
  public init(radius: CoreFoundation.CGFloat)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutIfNeeded()
  public func updateLocation(location: CoreFoundation.CGPoint)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, *)
@IBDesignable @_Concurrency.MainActor(unsafe) open class RouteButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 10.0, *)
public protocol SirlMapComponent : UIKit.UIView {
  var allocateMode: Swift.Bool { get set }
  var dataSource: SIRLCore.SirlCoreImpl { get }
  var destinationMarker: SIRLMap.DestinationMarker? { get }
  var routingMode: Swift.Bool { get set }
  var mapDelegate: SIRLMap.SirlMapDelegate? { get set }
  var currentLocation: SIRLCore.SirlLocation { get set }
  func loadMap(mapID: Swift.Int, client: SIRLCore.SirlAPIClient, ttl: Foundation.TimeInterval, completion: ((Swift.Bool) -> Swift.Void)?)
  func setMaxCord(xmax: CoreFoundation.CGFloat, ymax: CoreFoundation.CGFloat, xmin: CoreFoundation.CGFloat, ymin: CoreFoundation.CGFloat)
  func setDestination(destination: SIRLCore.SirlLocation, description: Swift.String)
  func allocateButtonAction()
  func resetDestination()
  func displayRoute(_ route: [SIRLMap.RouteNode])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
@_Concurrency.MainActor(unsafe) public class DestinationMarker : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var markerText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var markerImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var markerSize: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var makerWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var markerHeight: CoreFoundation.CGFloat {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, *)
@IBDesignable @_Concurrency.MainActor(unsafe) open class LocateUserButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) open var buttonLayer: SIRLMap.LocateUserButtonLayer
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 10.0, *)
public protocol SirlMapDelegate : AnyObject {
  func detinationApproached(distance: Swift.Double)
}
@available(iOS 10.0, *)
extension SIRLMap.SirlMapDelegate {
  public func detinationApproached(distance: Swift.Double)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 10.0, *)
@IBDesignable @objc @_Concurrency.MainActor(unsafe) open class SirlMapView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var delegate: SIRLMap.SirlMapDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cacheTTL: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isMapLoaded: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var navigationModeButton: SIRLMap.LocateUserButton
  @_Concurrency.MainActor(unsafe) open var routingButton: SIRLMap.RouteButton
  @_Concurrency.MainActor(unsafe) public var desinationMarker: SIRLMap.DestinationMarker? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var routingMode: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allocateMode: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func reload()
  @objc deinit
}
@available(iOS 10.0, *)
extension SIRLMap.SirlMapView {
  @_Concurrency.MainActor(unsafe) open func updateCurrentLocation(location: SIRLCore.SirlLocation)
  @_Concurrency.MainActor(unsafe) open func updateDestination(destination: SIRLCore.SirlLocation, allowRouting: Swift.Bool = true, destinationDescription: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) open func resetDestination()
}
@available(iOS 10.0, *)
extension SIRLMap.SirlMapView : SIRLCore.SirlCoreMapDelegate {
  @_Concurrency.MainActor(unsafe) public func didGetNewPosition(_ position: SIRLCore.SirlLocation)
  @_Concurrency.MainActor(unsafe) public func didDetectMapLocation(mlId: Swift.UInt32)
}
